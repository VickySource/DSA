#include <stdio.h>
#include <stdlib.h>
struct node {
int info;
struct node *llink, *rlink;
};
typedef struct node* NODE;
NODE getnode(int item) {
NODE x = (NODE)malloc(sizeof(struct node));
if (x == NULL) {
printf("Out of memory!\n");
exit(0);
}
x->info = item;
x->llink = x->rlink = NULL;
return x;
}
NODE insert(NODE root, int item) {
if (root == NULL) {
return getnode(item);
}
if (item < root->info) {
root->llink = insert(root->llink, item);
} else if (item > root->info) {
root->rlink = insert(root->rlink, item);
} else {
printf("Duplicate item %d not allowed\n", item);
}
return root;
}
void inorder(NODE root) {
if (root != NULL) {
inorder(root->llink);
printf("%d ", root->info);
inorder(root->rlink);
}
}
void preorder(NODE root) {
if (root != NULL) {
printf("%d ", root->info);
preorder(root->llink);
preorder(root->rlink);
}
}
void postorder(NODE root) {
if (root != NULL) {
postorder(root->llink);
postorder(root->rlink);
printf("%d ", root->info);
}
}
int main() {
NODE root = NULL;
int ch, item;
while (1) {
printf("\n--- BST MENU ---\n");
printf("1. Insert\n2. Preorder\n3. Inorder\n4. Postorder\n5. Exit\n");
printf("Enter your choice: ");
scanf("%d", &ch);
switch (ch) {
case 1:
printf("Enter item to insert: ");
scanf("%d", &item);
root = insert(root, item);
break;
case 2:
printf("Preorder: ");
preorder(root);
printf("\n");
break;
case 3:
printf("Inorder: ");
inorder(root);
printf("\n");
break;
case 4:
printf("Postorder: ");
postorder(root);
printf("\n");
break;
case 5:
exit(0);
default:
printf("Invalid choice! Try again.\n");
}
}
}
